#MODEL : FUNCTION EXPRESSION : JACOBIAN
#LOWER
Misra1a : b1*(1-np.exp(-b2*x)) : np.column_stack([1-np.exp(-b2*x),b1*x*np.exp(-b2*x)])
Misra1b : b1*(1-(1+b2*x/2)**(-2)) : np.column_stack([1-(1+b2*x/2)**(-2),b1*x*(1+b2*x/2)**(-3)])
Chwirut1 : np.exp(-b1*x)/(b2+b3*x) : np.column_stack([(-x)*np.exp(-b1*x)/(b2+b3*x),(-1)*np.exp(-b1*x)/(b2+b3*x)**2,(-x)*np.exp(-b1*x)/(b2+b3*x)**2])
Chwirut2 : np.exp(-b1*x)/(b2+b3*x) : np.column_stack([(-x)*np.exp(-b1*x)/(b2+b3*x),(-1)*np.exp(-b1*x)/(b2+b3*x)**2,(-x)*np.exp(-b1*x)/(b2+b3*x)**2])
Gauss1 : b1*np.exp(-b2*x) + b3*np.exp(-(x-b4)**2/b5**2) + b6*np.exp(-(x-b7)**2/b8**2) : np.column_stack([np.exp(-b2*x),-b1*x*np.exp(-b2*x),np.exp(-(x-b4)**2/b5**2),(2*(x-b4)/b5**2)*b3*np.exp(-(x-b4)**2/b5**2),(2*(x-b4)**2/b5**3)*b3*np.exp(-(x-b4)**2/b5**2),np.exp(-(x-b7)**2/b8**2),(2*(x-b7)/b8**2)*b6*np.exp(-(x-b7)**2/b8**2),(2*(x-b7)**2/b8**3)*b6*np.exp(-(x-b7)**2/b8**2)])
Gauss2 : b1*np.exp(-b2*x) + b3*np.exp(-(x-b4)**2/b5**2)+b6*np.exp(-(x-b7)**2/b8**2) : np.column_stack([np.exp(-b2*x),-b1*x*np.exp(-b2*x),np.exp(-(x-b4)**2/b5**2),(2*(x-b4)/b5**2)*b3*np.exp(-(x-b4)**2/b5**2),(2*(x-b4)**2/b5**3)*b3*np.exp(-(x-b4)**2/b5**2),np.exp(-(x-b7)**2/b8**2),(2*(x-b7)/b8**2)*b6*np.exp(-(x-b7)**2/b8**2),(2*(x-b7)**2/b8**3)*b6*np.exp(-(x-b7)**2/b8**2)])
DanWood : b1*x**b2 : np.column_stack([x**b2,b1*np.log(x)*x**b2])
Lanczos3 : b1*np.exp(-b2*x) + b3*np.exp(-b4*x) + b5*np.exp(-b6*x) : np.column_stack([np.exp(-b2*x),-b1*x*np.exp(-b2*x),np.exp(-b4*x),-b3*x*np.exp(-b4*x),np.exp(-b6*x),-b5*x*np.exp(-b6*x)])

#HIGHER
Thurber : (b1 + b2*x + b3*x**2 + b4*x**3)/(1 + b5*x + b6*x**2 + b7*x**3) : np.column_stack([1/(1 + b5*x + b6*x**2 + b7*x**3),x/(1 + b5*x + b6*x**2 + b7*x**3),x**2/(1 + b5*x + b6*x**2 + b7*x**3),x**3/(1 + b5*x + b6*x**2 + b7*x**3),(-x)*(b1 + b2*x + b3*x**2 + b4*x**3)/(1 + b5*x + b6*x**2 + b7*x**3)**2,(-x**2)*(b1 + b2*x + b3*x**2 + b4*x**3)/(1 + b5*x + b6*x**2 + b7*x**3)**2,(-x**3)*(b1 + b2*x + b3*x**2 + b4*x**3)/(1 + b5*x + b6*x**2 + b7*x**3)**2])
Misra1c : b1*(1-(1+2*b2*x)**(-.5)) : np.column_stack([(1-(1+2*b2*x)**(-.5)),b1*x*(1+2*b2*x)**(-1.5)])
Misra1d : b1*b2*x*((1+b2*x)**(-1)) : np.column_stack([b2*x*((1+b2*x)**(-1)),b1*x*((1+b2*x)**(-1))-b1*b2*(x**2)*((1+b2*x)**(-2))])
Bennett5 : b1*(b2+x)**(-1/b3) : np.column_stack([(b2+x)**(-1/b3), b1*(-1/b3)*(b2+x)**((-1/b3)-1),b1*np.log(b2+x)*(b2+x)**(-1/b3)*((1/b3)**2)])
