
#Output from test_generator.py using NIST data and results
#It is advised that no changes are done in this file.
#Any desired modification should be generalised and added
#in test_generator.py
 
import numpy as np
import statsmodels.api as sm
from statsmodels.miscmodels.nonlinls import NonlinearLS
from numpy.testing import assert_almost_equal, assert_

class TestNonlinearLS(object):
    pass

class funcBennett5(NonlinearLS):

    def expr(self, params, exog=None):
        if exog is None:
            x = self.exog
        else:
            x = exog
        b1, b2, b3 = params
        return b1*(b2+x)**(-1/b3)

    def jacobian(self, params, exog=None):
        if exog is None:
            x = self.exog
        else:
            x = exog
        b1, b2, b3 = params
        return np.column_stack([(b2+x)**(-1/b3), b1*(-1/b3)*(b2+x)**((-1/b3)-1),b1*np.log(b2+x)*(b2+x)**(-1/b3)*((1/b3)**2)])

class TestBennett5(TestNonlinearLS):

    def setup(self):
        x = np.array([7.4471679999999996,
                   8.1025860000000005,
                   8.4525469999999991,
                   8.7112780000000001,
                   8.9167740000000002,
                   9.0871549999999992,
                   9.2325900000000001,
                   9.3595349999999993,
                   9.4721659999999996,
                   9.5733840000000008,
                   9.6652930000000001,
                   9.7494610000000002,
                   9.8270920000000004,
                   9.8991279999999993,
                   9.9663210000000007,
                   10.02928,
                   10.088509999999999,
                   10.14443,
                   10.197380000000001,
                   10.247669999999999,
                   10.29556,
                   10.34125,
                   10.38495,
                   10.426819999999999,
                   10.467000000000001,
                   10.50564,
                   10.54283,
                   10.57869,
                   10.61331,
                   10.64678,
                   10.67915,
                   10.710520000000001,
                   10.740919999999999,
                   10.770440000000001,
                   10.799099999999999,
                   10.826969999999999,
                   10.85408,
                   10.880470000000001,
                   10.90619,
                   10.93126,
                   10.955719999999999,
                   10.97959,
                   11.00291,
                   11.025700000000001,
                   11.047980000000001,
                   11.06977,
                   11.091100000000001,
                   11.111980000000001,
                   11.132440000000001,
                   11.152480000000001,
                   11.172129999999999,
                   11.191409999999999,
                   11.21031,
                   11.228870000000001,
                   11.24709,
                   11.26498,
                   11.28256,
                   11.29984,
                   11.31682,
                   11.33352,
                   11.34994,
                   11.366099999999999,
                   11.382,
                   11.39766,
                   11.413069999999999,
                   11.428240000000001,
                   11.443199999999999,
                   11.457929999999999,
                   11.472440000000001,
                   11.486750000000001,
                   11.500859999999999,
                   11.51477,
                   11.52849,
                   11.542020000000001,
                   11.55538,
                   11.56855,
                   11.58156,
                   11.59442,
                   11.607120999999999,
                   11.61964,
                   11.632,
                   11.644209999999999,
                   11.656280000000001,
                   11.668200000000001,
                   11.67998,
                   11.69162,
                   11.70313,
                   11.714510000000001,
                   11.725759999999999,
                   11.736879999999999,
                   11.74789,
                   11.75878,
                   11.769550000000001,
                   11.780200000000001,
                   11.79073,
                   11.801159999999999,
                   11.81148,
                   11.8217,
                   11.831810000000001,
                   11.84182,
                   11.85173,
                   11.861549999999999,
                   11.871270000000001,
                   11.880890000000001,
                   11.890420000000001,
                   11.89987,
                   11.909219999999999,
                   11.91849,
                   11.927680000000001,
                   11.936780000000001,
                   11.945790000000001,
                   11.95473,
                   11.96359,
                   11.97237,
                   11.981070000000001,
                   11.989699999999999,
                   11.99826,
                   12.006740000000001,
                   12.01515,
                   12.023490000000001,
                   12.03176,
                   12.03997,
                   12.0481,
                   12.05617,
                   12.06418,
                   12.07212,
                   12.08001,
                   12.087820000000001,
                   12.09558,
                   12.10328,
                   12.11092,
                   12.118499999999999,
                   12.12603,
                   12.1335,
                   12.14091,
                   12.14827,
                   12.155570000000001,
                   12.16283,
                   12.170030000000001,
                   12.17717,
                   12.18427,
                   12.191319999999999,
                   12.198320000000001,
                   12.205270000000001,
                   12.21217,
                   12.21903,
                   12.22584,
                   12.2326,
                   12.239319999999999,
                   12.245990000000001,
                   12.25262,
                   12.2592,
                   12.265750000000001,
                   12.27224])
        y = np.array([-34.834702,
                   -34.3932,
                   -34.152901,
                   -33.979098999999998,
                   -33.845900999999998,
                   -33.732899000000003,
                   -33.640301000000001,
                   -33.559199999999997,
                   -33.486801,
                   -33.423099999999998,
                   -33.365101000000003,
                   -33.313000000000002,
                   -33.260899000000002,
                   -33.217399999999998,
                   -33.176898999999999,
                   -33.139198,
                   -33.101601000000002,
                   -33.066799000000003,
                   -33.034999999999997,
                   -33.003101000000001,
                   -32.971297999999997,
                   -32.942298999999998,
                   -32.916302000000002,
                   -32.890202000000002,
                   -32.864100999999998,
                   -32.841000000000001,
                   -32.817799000000001,
                   -32.797500999999997,
                   -32.774299999999997,
                   -32.756999999999998,
                   -32.733798999999998,
                   -32.7164,
                   -32.699100000000001,
                   -32.678798999999998,
                   -32.6614,
                   -32.644001000000003,
                   -32.626700999999997,
                   -32.612202000000003,
                   -32.597698000000001,
                   -32.583199,
                   -32.568699000000002,
                   -32.554298000000003,
                   -32.539799000000002,
                   -32.525298999999997,
                   -32.510798999999999,
                   -32.499198999999997,
                   -32.487597999999998,
                   -32.473202000000001,
                   -32.461601000000002,
                   -32.435501000000002,
                   -32.435501000000002,
                   -32.4268,
                   -32.412300000000002,
                   -32.400798999999999,
                   -32.392100999999997,
                   -32.380501000000002,
                   -32.366000999999997,
                   -32.357300000000002,
                   -32.348598000000003,
                   -32.339900999999998,
                   -32.328400000000002,
                   -32.319698000000002,
                   -32.311000999999997,
                   -32.299399999999999,
                   -32.290698999999996,
                   -32.282001000000001,
                   -32.273299999999999,
                   -32.264598999999997,
                   -32.256000999999998,
                   -32.247298999999998,
                   -32.238602,
                   -32.229900000000001,
                   -32.224097999999998,
                   -32.215401,
                   -32.203800000000001,
                   -32.198002000000002,
                   -32.189399999999999,
                   -32.183601000000003,
                   -32.174900000000001,
                   -32.169102000000002,
                   -32.1633,
                   -32.154598,
                   -32.145901000000002,
                   -32.140098999999999,
                   -32.131400999999997,
                   -32.125599000000001,
                   -32.119801000000002,
                   -32.111198000000002,
                   -32.105400000000003,
                   -32.096699000000001,
                   -32.090899999999998,
                   -32.088000999999998,
                   -32.079300000000003,
                   -32.073501999999998,
                   -32.067698999999998,
                   -32.061900999999999,
                   -32.056099000000003,
                   -32.050300999999997,
                   -32.044497999999997,
                   -32.038798999999997,
                   -32.033000999999999,
                   -32.027199000000003,
                   -32.024299999999997,
                   -32.018501000000001,
                   -32.012698999999998,
                   -32.004002,
                   -32.001099000000004,
                   -31.9953,
                   -31.9895,
                   -31.983699999999999,
                   -31.977900000000002,
                   -31.972099,
                   -31.969298999999999,
                   -31.963501000000001,
                   -31.957701,
                   -31.951899999999998,
                   -31.946100000000001,
                   -31.940300000000001,
                   -31.937401000000001,
                   -31.931601000000001,
                   -31.925799999999999,
                   -31.922899000000001,
                   -31.917100999999999,
                   -31.911301000000002,
                   -31.9084,
                   -31.902598999999999,
                   -31.896899999999999,
                   -31.893999000000001,
                   -31.888200999999999,
                   -31.885300000000001,
                   -31.882401000000002,
                   -31.8766,
                   -31.873698999999998,
                   -31.867901,
                   -31.862100999999999,
                   -31.859200000000001,
                   -31.856300000000001,
                   -31.8505,
                   -31.8447,
                   -31.841801,
                   -31.838899999999999,
                   -31.833099000000001,
                   -31.830200000000001,
                   -31.827299,
                   -31.8216,
                   -31.818701000000001,
                   -31.812901,
                   -31.809999000000001,
                   -31.807099999999998,
                   -31.801300000000001,
                   -31.798400999999998,
                   -31.795500000000001,
                   -31.7897,
                   -31.786799999999999])
        mod1 = funcBennett5(y, x)
        self.res_start1 = mod1.fit(start_value=[-2000.0, 50.0, 0.80000000000000004])
        mod2 = funcBennett5(y, x)
        self.res_start2 = mod2.fit(start_value=[-1500.0, 45.0, 0.84999999999999998])

    def test_basic(self):
        res1 = self.res_start1
        res2 = self.res_start2
        assert_almost_equal(res1.params,[-2523.5058042999999, 46.736564643999998, 0.93218483193000001],decimal=3)
        assert_almost_equal(res2.params,[-2523.5058042999999, 46.736564643999998, 0.93218483193000001],decimal=3)
